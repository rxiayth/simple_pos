Layout.
App
    -> Menu
        -> MenuItem
    -> Cart
        -> CartItem
        -> Total
    -> ActionBar
        -> Action




App.js
    - the main container of the whole system.

    - has 'menu' : the product name, sku, price, etc
    - has 'inventory' : the volume of each sku
    -

    - 3 components
        1. Menu.js
        2. Cart.js
        3. Actions.js

    - has callback functions
        1. selectMenuItem - send to menu
            - called when user clicks on one of the items on the menu
            - take in sku, output nothing
            - update cart to include the selected item
            - update menu to correctly represent the current inventory

        //2. selectCartItem - send to cart
        //    - called when user clicks on one of the items on the cart
        //    - take in sku, output nothing
        3. selectAction - send to actions
            - called when user clicks on one of the items on the actions

            - discuss how the layout should look like.
                - 4 funcs in app, send all via prop to actions to each action?
                    - messy
                - 1 func in app split by a parameter (1,2,3,4) send one via prop
                    to actions, action sends to each action with parameter 1234?
                    - unnecessary information in each action

Menu.js
    - 1 component x NUMBER OF ITEMS ON MENU(25)
        1. MenuItem.js

    - receive 'menu' from App.js
        'menu' will have sku:product_name

    - passes the selectCartItem to MenuItems.
    - passes each MenuItem a unique sku as key and product_name

MenuItem.js
    - display product_name
    - only needs sku and product_name

    - has a function to handle onclick
        in which will call App.js's selectMenuItem
        * random thought, App.js = 1 selectButton function to be shared everywhere
        * menu has 1 selectMenuItem function that calls selectButton
        * and menu item calls selectMenuItem?

Cart.js
    - 2 components
        1. CartItem.js
        2. Total.js

    - will receive from App.js
        1. total cost? vs individual price that Cart will add up?
        2. cart items as a list (as to keep the order of products?)
            * is it necesary? i'd prefer to use dictionary
        3. do we need a minus function?
            * note swipe to remove.
            * link : https://stackoverflow.com/questions/40463173/swipe-effect-in-react-js

CartItem.js
    - individual items in cart
    - needs sku, product name, and quantity



Actions.js
    - 1 components x NUMBER OF ACTIONS(4)
        1. Action.js


        {/*
        'hasOwnPropery' is needed because it's possible to insert keys
        into the prototype object of 'this.props.menu'.
        link: https://stackoverflow.com/questions/558981/getting-a-list-of-associative-array-keys
        */}
